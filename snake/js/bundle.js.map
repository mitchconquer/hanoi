{"version":3,"sources":["webpack:///webpack/bootstrap 30f5158367a8d6f952f4","webpack:///./main.js","webpack:///./board.js","webpack:///./snake.js","webpack:///./coord.js","webpack:///./apple.js","webpack:///./snake-view.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAC;;;;;;;ACPD;AACA;;;AAGA,4BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,kBAAiB,mBAAmB;AACpC;AACA,oBAAmB,mBAAmB;AACtC;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,IAAG;AACH;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA,kBAAiB,wBAAwB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC5EA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA,kBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,kBAAiB,0BAA0B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AChGA;AACA;AACA;AACA;;AAEA;;;;;;;ACLA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,QAAO;AACP;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA,kBAAiB,yBAAyB;AAC1C;AACA,oBAAmB,+BAA+B;AAClD;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 30f5158367a8d6f952f4\n **/","const Board = require('./board.js');\nconst SnakeView = require('./snake-view.js');\n$(() => {\n  console.log(\"Document is ready!\");\n  const rootEl = $('.snake-game');\n  const board = new Board();\n  new SnakeView(board, rootEl);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./main.js\n ** module id = 0\n ** module chunks = 0\n **/","const Snake = require('./snake.js');\nconst Apple = require('./apple.js');\n\n\nfunction Board(options = {}) {\n  let s = new Snake();\n  this.snake = s;\n  this.apples = [];\n  this.score = 0;\n  this.speed = 150;\n  this.gridSize = options.gridSize || 50;\n  this.grid = this.createBoard();\n  this.addApple();\n}\n\nBoard.prototype.createBoard = function() {\n  let board = [];\n  for (let i = 0; i < this.gridSize; i++) {\n    let row = [];\n    for (let j = 0; j < this.gridSize; j++) {\n      row.push([]);\n    }\n    board.push(row);\n  }\n  return board;\n};\n\nBoard.prototype.addApple = function () {\n  let validPosition = false;\n  while (!validPosition) {\n    let apple = new Apple(this.gridSize);\n    if (this.snake.isClear(apple)) {\n      validPosition = true;\n      this.apples.push(apple);\n    }\n  }\n};\n\n\nBoard.prototype.checkCollisions = function() {\n  // If any of these expressions return true, the whole expression\n  // is true.\n  this.appleCollision();\n  return this.snakeCollision() || this.wallCollision();\n};\n\nBoard.prototype.snakeCollision = function () {\n  return this.snake.selfCollision();\n};\n\n\nBoard.prototype.wallCollision = function () {\n  if (this.snake.head().x < 0 || this.snake.head().x >= this.gridSize) {\n    return true;\n  } else if (this.snake.head().y < 0 || this.snake.head().y >= this.gridSize) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nBoard.prototype.appleCollision = function () {\n  for (let i = 0; i < this.apples.length; i++) {\n    if (this.snake.head().x === this.apples[i].x && this.snake.head().y === this.apples[i].y) {\n      // this.snake.addTo();\n      this.snake.ateApple = true;\n      this.apples.splice(i, 1);\n      this.score += 1;\n      this.addApple();\n      if (this.speed >= 75) {\n        this.speed -= 25;\n      }\n    }\n  }\n  return false;\n};\nmodule.exports = Board;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./board.js\n ** module id = 1\n ** module chunks = 0\n **/","const Coord = require('./coord.js');\n\nfunction Snake() {\n  this.direction = \"N\";\n  this.segments = [new Coord(10, 10)];\n  this.ateApple = false;\n}\n\nSnake.prototype.head = function () {\n  return this.segments[0];\n};\n\nSnake.prototype.move = function () {\n  this.addToFront();\n  if (!this.ateApple) {\n    this.segments.pop();\n  } else {\n    this.ateApple = false;\n  }\n};\n\nSnake.prototype.selfCollision = function () {\n  for (let i = 1; i < this.segments.length; i++) {\n    if (this.segments[i].x === this.head().x && this.segments[i].y === this.head().y) {\n      return true;\n    }\n  }\n  return false;\n};\n\nSnake.prototype.addToFront = function() {\n  let head = this.segments[0];\n  this.segments.unshift(new Coord(head.x + this.deltaX(),\n      head.y + this.deltaY()));\n};\n\n\n\n\nSnake.prototype.isOpposite = function(direction) {\n  switch (direction) {\n    case \"N\":\n      if (this.direction === \"S\") {\n        return true;\n      }\n      return false;\n    case \"W\":\n      if (this.direction === \"E\") {\n        return true;\n      }\n      return false;\n    case \"S\":\n      if (this.direction === \"N\") {\n        return true;\n      }\n      return false;\n    case \"E\":\n      if (this.direction === \"W\") {\n        return true;\n      }\n      return false;\n    default:\n      return false;\n  }\n};\nSnake.prototype.deltaX = function() {\n  switch (this.direction) {\n    case \"E\":\n      return 1;\n    case \"W\":\n      return -1;\n    default:\n      return 0;\n  }\n};\n\n\nSnake.prototype.deltaY = function() {\n  switch (this.direction) {\n    case \"N\":\n      return -1;\n    case \"S\":\n      return 1;\n    default:\n      return 0;\n  }\n};\n\nSnake.prototype.isClear = function (apple) {\n  for (let i = 0; i < this.segments.length; i++) {\n    if (this.segments[i].x === apple.x && this.segments[i].y === apple.y) {\n      return false;\n    }\n  }\n  return true;\n};\nmodule.exports = Snake;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./snake.js\n ** module id = 2\n ** module chunks = 0\n **/","function Coord(x, y) {\n this.x = x;\n this.y = y;\n}\n\nmodule.exports = Coord;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./coord.js\n ** module id = 3\n ** module chunks = 0\n **/","function Apple(gridSize) {\n  this.x = this.getRandomCoord(0, gridSize - 1);\n  this.y = this.getRandomCoord(0, gridSize - 1);\n}\n\nApple.prototype.getRandomCoord = function (min, max) {\n  return Math.round(Math.random() * (max - min) + min);\n};\n\nmodule.exports = Apple;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./apple.js\n ** module id = 4\n ** module chunks = 0\n **/","\nfunction SnakeView(board, gameSpace) {\n  this.board = board;\n  this.gameSpace = gameSpace;\n  this.render();\n  this.finished = false;\n  $(document).on(\"keydown\", this.keydownCallback.bind(this));\n  this.renderBoard();\n  this.step();\n}\n\nSnakeView.prototype.getSpeed = function () {\n  return this.board.speed;\n};\n\nSnakeView.prototype.keydownCallback = function (event) {\n  let direction = event.keyCode;\n  switch (direction) {\n    case 37:\n      if (!this.board.snake.isOpposite(\"W\")) {\n        this.board.snake.direction = \"W\";\n        break;\n      } else {\n        break;\n      }\n    case 38:\n      if (!this.board.snake.isOpposite(\"N\")) {\n        this.board.snake.direction = \"N\";\n        break;\n      } else {\n        break;\n      }\n    case 39:\n      if (!this.board.snake.isOpposite(\"E\")) {\n        this.board.snake.direction = \"E\";\n        break;\n      } else {\n        break;\n      }\n    case 40:\n      if (!this.board.snake.isOpposite(\"S\")) {\n        this.board.snake.direction = \"S\";\n        break;\n      } else {\n        break;\n      }\n    default:\n      break;\n  }\n};\n\nSnakeView.prototype.render = function () {\n  if (this.board.checkCollisions()) {\n    this.gameOver();\n  }\n  this.clearBoard();\n  this.renderSnake();\n  this.renderApples();\n  this.renderScore();\n};\n\nSnakeView.prototype.renderScore = function () {\n  console.log(this.board.score);\n  $('h2').text(this.board.score);\n};\n\nSnakeView.prototype.gameOver = function () {\n  $('h1').text(\"Game Over!\");\n  this.finished = true;\n};\n\nSnakeView.prototype.clearBoard = function () {\n  $(this.gameSpace).children().each(function() {\n    $(this).children().removeClass();\n  });\n};\n\nSnakeView.prototype.renderApples = function () {\n  this.board.apples.forEach(apple => {\n    let row = $('ul')[apple.y];\n    let square = $(row).children()[apple.x];\n    $(square).addClass(\"apple\");\n  });\n};\n\nSnakeView.prototype.renderBoard = function () {\n  for (let i = 0; i < this.board.gridSize; i++) {\n    let $uList = $(\"<ul></ul>\");\n    for (let j = 0; j < this.board.grid[i].length; j++) {\n      let $li = $(\"<li></li>\");\n\n      $uList.append($li);\n    }\n    this.gameSpace.append($uList);\n  }\n};\n\nSnakeView.prototype.renderSnake = function () {\n  this.board.snake.segments.forEach(coord => {\n    let row = $('ul')[coord.y];\n    let square = $(row).children()[coord.x];\n    $(square).addClass(\"snake\");\n  });\n};\n\nSnakeView.prototype.step = function () {\n  if (!this.finished) {\n    setTimeout(this.step.bind(this), this.getSpeed());\n  }\n  this.board.snake.move();\n  this.render();\n};\n\nmodule.exports = SnakeView;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./snake-view.js\n ** module id = 5\n ** module chunks = 0\n **/"],"sourceRoot":""}